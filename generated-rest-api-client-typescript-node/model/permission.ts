/**
 * Papermerge REST API
 * Document management system designed for digital archives
 *
 * The version of the OpenAPI document: 2.1.0b12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A `ModelSerializer` is just a regular `Serializer`, except that:  * A set of default fields are automatically populated. * A set of default validators are automatically populated. * Default `.create()` and `.update()` implementations are provided.  The process of automatically determining a set of serializer fields based on the model fields is reasonably complex, but you almost certainly don\'t need to dig into the implementation.  If the `ModelSerializer` class *doesn\'t* generate the set of fields that you need you should either declare the extra/differing fields explicitly on the serializer class, or simply use a `Serializer` class.   Included Mixins:  * A mixin class to enable sparse fieldsets is included * A mixin class to enable validation of included resources is included
*/
export class Permission {
    'id': number;
    'name': string;
    'codename': string;
    'contentType': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "codename",
            "baseName": "codename",
            "type": "string"
        },
        {
            "name": "contentType",
            "baseName": "content_type",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Permission.attributeTypeMap;
    }
}

